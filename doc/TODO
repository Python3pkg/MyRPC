- lib/py: assert-ek, None check-ek
- py: super().__init__ check
- py: docstring corrections
- fastbinary implementation for py
- buf: bytes, s: string, ch: char, b: byte
- protected variable usage
- unicode: encoding errors?
- unicode: strict?
- server backend with HTTPClientTransport?
- handle circular references
- struct type: oroklodes?
- my.cpp-s serializalo megoldas?
- setter/getter opcio (pl. setter/getter nelkul, direktbe prop allitas)
- objc: - Once we have native C implementation, then rewrite ObjC runtime as a wrapper.
- website: live demo, pl. kepfeltolto... + forraskod + doc + kulcsrakesz kliensek!

- binary capable (no base64, whatever encoding)
- lang api-s are similar
- js/nodejs
- single roundtrip
- circular references not supported yet
- jsclient: browser, jsserver: nodejs

---

- Azutan:
  - pygenerator atolv!!!

  - FIXME javitas
  - seriexc -> encodexc?
  - deseriexc -> decodeexc?
  - jsclient: delayed exc handler
  - nodejs server modul? (+ examples client es szerverhez)

---

- Tehat
  - py atolv
  - \n\n problema...
  - a types-ben egyes tipusok lehetnenek _-el kezdodni

- Doc
  - compat/strict mode application note (pl. rpc verziozas, kliens update, stb.)

- Cel
  - correct input validation
  - binarycodec is supported on all platforms
  - all datatypes are supported on all platforms (w/ limitations)

- Altalanos
  - try+catch or explicit check? 
  - (...) konstrukciokat atnezni, js-ben is! ([0], [1], .prop helyett)
  - kommentek atnezese
  - internalexception helyett assert (pl. myrpcgen-ben)
  - py: importok ellenorzese (csak az legyen importalva ami kell)
  - hibauzik atnezese/javitasa mindenhol
  - codec: binary/string/list size checks?
  - exception hier is flat: jo ez igy?
  - Types szetvalasztas kliens ill. szerver oldalra?
  - Elegge szigoru a proto impl. Esetleg konnyites?
  - ERROR message: include errortype?
  - JS: csak a callback-ban dobunk hibat vagy a client.call_method-ban is mar?

- *Generator
  - optimalizalt kodgeneralas, ha 
    - nincs pl. return type, vagy args
    - a metodus nem dob exceptiont
    - esetleg Types szetvalasztas (hogy mit generaljon le)
  - null elemek a listben?

- BinaryCodec.js
  - StringView hasznalata

- JSGenerator
  - more correct error reporting on deserialize errors of struct/exc/methods...
  - more compat error reporting? (tul sok a duplikalt string...)
  - validate_ns dup with PyGenerator

- Parser
  - stream oriented syntax, like c
  - date, time type
  - warn on not used exc, types, structs, etc...
  - docstring handle -> written into generated code
  - eliminate redundant types (pl. list lista1 string, list lista2 string)

- BinaryCodec
  - uzenetvege marker?
  - js: max/min int: http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html
  - protocol versioning
  - compressed datatype (pl. datatype for zero length strings, or 1 <= len <= 256, stb.)
  - FIXME: struct.error: int too large to convert, (py)

- js
  - var deklaraciok mindig a func elejen!
  - 64 bites hack talan lehetne egyszerubb?

- HTTPClientTransport
  - HTTPClientTransport specific exc?
  - useragent
  - setting: set_state check?
  - set_state semantic implementation

py:
   - exceptionoknak az Exception osztalybol kell szarmazniuk: ok
   - py: types: 1xu pkg1(dir).pkg2(dir).mod(file)->symbol: todo
     - 
     - pkg1(dir)/pkg2(dir)/Client.py
       |                /
           namespace
           __init__.py-ket letre kell hozni
       -> class Client:
     - pkg1(dir)/pkg2(dir)/Types.py
       -> class, def...
     - pkg1(dir)/pkg2(dir)/Server.py...
