# THIS FILE IS AUTOMATICALLY GENERATED BY MyRPCgen 0.0.2-dev. DO NOT EDIT.

from abc import ABCMeta, abstractmethod

from myrpc.util.ProcessorSubr import HandlerReturn, ProcessorSubr
from GalleryService import Types

class Interface(metaclass = ABCMeta):
    @abstractmethod
    def list_image_info(self, skip_imgid):
        pass

    @abstractmethod
    def upload_image(self, imgbuf):
        pass

class Processor:
    def __init__(self, impl):
        self._impl = impl

        methodmap = {
            "list_image_info": (Types.myrpc_args_seri_list_image_info, self._handle_list_image_info),
            "upload_image": (Types.myrpc_args_seri_upload_image, self._handle_upload_image)
        }

        self._proc = ProcessorSubr(methodmap)

    def process_one(self, tr, codec):
        self._proc.process_one(tr, codec)

    def _handle_list_image_info(self, args_seri):
        arg_skip_imgid = args_seri.get_skip_imgid()

        exc_name = None

        r = self._impl.list_image_info(arg_skip_imgid)

        hr = HandlerReturn()

        if exc_name != None:
            hr.set_exc(exc, exc_name)
        else:
            result_seri = Types.myrpc_result_seri_list_image_info()
            result_seri.set_result(r)

            hr.set_result(result_seri)

        return hr

    def _handle_upload_image(self, args_seri):
        arg_imgbuf = args_seri.get_imgbuf()

        exc_name = None

        try:
            self._impl.upload_image(arg_imgbuf)
        except Types.UnknownFormat as e:
            exc_name = "UnknownFormat"
            exc = e
        except Types.SizeTooLarge as e:
            exc_name = "SizeTooLarge"
            exc = e

        hr = HandlerReturn()

        if exc_name != None:
            hr.set_exc(exc, exc_name)
        else:
            result_seri = Types.myrpc_result_seri_upload_image()

            hr.set_result(result_seri)

        return hr
